#!/bin/bash

function fatal() {
	echo "$@" 1>&2
	exit 1
}

function usage() {
        echo "Not enough args, use $0 monip=<monip> [ option=value ... ]" 1>&2
        echo "  Mandatory parameters:" 1>&2
        echo "          monip=<address>[:port] (first monitor IP address and optionally port)" 1>&2
        echo "          clusternet=<addr/mask> (cluster client network)" 1>&2
        echo "  Optional parameters:" 1>&2
        echo "          monname=string (first monitor name, default is \"prima\")" 1>&2
        echo "          cluster=string (cluster name, default is \"ceph\")" 1>&2
        echo "          chooseleaf=int (0 - device, 1 - host, default is 1)" 1>&2
        echo "          minsize=int (minimum replica count to be writable, default is 1)" 1>&2
        echo "          defsize=int (default replica count, default is 3)" 1>&2
        echo "          osdnet=addr/mask (private network, default matching \$clusternet)" 1>&2
}

if [ "$1" = "" -o "$1" = "help" -o "$1" = "--help" -o "$1" = "-?" ] ; then
	usage
        fatal Exit
fi

cluster="ceph"
monname="prima"
if [ -f /etc/sysconfig/ceph ] ; then
        . /etc/sysconfig/ceph
        if [ "$CLUSTER" != "" ] ; then
                cluster="$CLUSTER"
        fi
fi

chooseleaf=1
minsize=1
defsize=3

while [ "$1" != "" ] ; do
    param=`echo "$1" | cut -f 1 -d "="`
    value=`echo "$1" | cut -f 2- -d "="`
    export "$param"="$value"
    shift
done

if [ "$monip" = "" -o "$clusternet" = "" ] ; then
	echo "-- Mandatory parameters not set --" 1>&2
	echo "" 1>&2
	usage
	fatal Aborted
fi

if ! echo "$monip" | grep -q : ; then
	monip="$monip:6789"
fi
checkip=$(echo $monip | cut -f 1 -d :)
if ! ip addr | grep -q " $checkip/" ; then
        echo "Local IP address \"$checkip\" not found" 1>&2
        fatal Aborted
fi

if [ -f "/etc/ceph/$cluster.conf" ] ; then
        echo "Unable to continue, cluster config exists" 1>&2
        exit 1
else
        if [ "$osdnet" = "" ] ; then
                osdnet="$clusternet"
        fi
        fsid=`uuidgen`
        echo "[global]
fsid = $fsid
public_network = $clusternet
cluster_network = $osdnet
mon_initial_members = $monname
mon_host = $monip
osd_crush_chooseleaf_type = $chooseleaf
osd_pool_default_size = $defsize
osd_pool_default_min_size = $minsize

#
# Performance defaults
#
auth_cluster_required = cephx
auth_service_required = cephx
auth_client_required = cephx

filestore_fd_cache_size = 2048
filestore_fd_cache_shards = 16
filestore_min_sync_interval = 0.1
filestore_max_sync_interval = 10
filestore_max_inline_xattr_size = 1024
filestore_op_threads = 8
filestore_queue_max_ops = 4096
filestore_queue_max_bytes = 1024768000
filestore_wbthrottle_enable = false

journal_queue_max_ops = 8192
journal_max_write_bytes = 104857600
journal_max_write_entries = 4096

mon_allow_pool_delete = true
mon_max_pool_pg_num = 166496
mon_max_pg_per_osd = 16384
mon_osd_adjust_heartbeat_grace = false
mon_osd_adjust_down_out_interval = false
mon_osd_allow_primary_affinity = true
mon_osd_down_out_interval = 7200
mon_osd_max_split_count = 10000
mon_osd_min_up_ratio = 0.001
mon_osd_min_in_ratio = 0.001
mon_osd_min_down_reporters = 2
mon_osd_min_down_reports = 3
mon_osd_report_timeout = 90
mon_pg_warn_max_per_osd = 10000
mon_health_preluminous_compat_warning = false
ms_dispatch_throttle_bytes = 1048576000
ms_dispatch_max_bytes = 1048576000
ms_nocrc = true
mutex_perf_counter = true

objecter_inflight_op_bytes = 1048576000
objecter_inflight_ops = 102400

osd_beacon_report_interval = 5
osd_client_message_size_cap = 0
osd_client_message_cap = 0
osd_crush_update_on_start = false
osd_enable_op_tracker = true
osd_heartbeat_grace = 60
osd_heartbeat_interval = 1
osd_max_backfills = 4
osd_mon_heartbeat_interval = 15
osd_mon_report_interval_min = 5
osd_mon_report_interval_max = 15
osd_map_message_max = 10
osd_map_cache_size = 20
osd_map_max_advance = 10
osd_map_share_max_epochs = 10
osd_op_num_shards = 10
osd_op_threads = 16
osd_op_queue = wpq
osd_op_queue_cut_off = high
osd_pg_epoch_persisted_max_stale = 10
osd_recovery_delay_start = 0
osd_recovery_max_active = 32
osd_recovery_threads = 1
osd_recovery_op_priority = 63
osd_scrub_chunk_min = 1
osd_scrub_chunk_max = 2

perf = true

throttler_perf_counter = true

debug_lockdep = 0/0
debug_context = 0/0
debug_crush = 0/0
debug_buffer = 0/0
debug_timer = 0/0
debug_filer = 0/0
debug_objecter = 0/0
debug_rados = 0/0
debug_rbd = 0/0
debug_journaler = 0/0
debug_osd = 0/0
debug_optracker = 0/0
debug_objclass = 0/0
debug_filestore = 0/0
debug_journal = 0/0
debug_ms = 0/0
debug_monc = 0/0
debug_tp = 0/0
debug_auth = 0/0
debug_finisher = 0/0
debug_heartbeatmap = 0/0
debug_perfcounter = 0/0
debug_asok = 0/0
debug_throttle = 0/0
debug_paxos = 0/0
debug_rgw = 0/0
debug_javaclient = 0/0
debug_xio = 0/0
debug_compressor = 0/0
debug_bluestore = 0/0
debug_newstore = 0/0
debug_bluefs = 0/0
debug_bdev = 0/0
debug_kstore = 0/0
debug_rocksdb = 0/0
debug_leveldb = 0/0
debug_kinetic = 0/0
debug_fuse = 0/0" > "/etc/ceph/$cluster.conf"

fi

monaddr=`echo $monip | cut -f 1 -d :`
monkring="/tmp/$cluster.mon.keyring"
monmap="/tmp/$cluster.monmap"
admkring="/etc/ceph/$cluster.client.admin.keyring"
rm -f "$admkring" "$monmap" "$monkring"

echo "Creating mon keyring" 1>&2
ceph-authtool --create-keyring "$monkring" --gen-key -n mon. --cap mon 'allow *' || exit 1
echo "Creating adm keyring" 1>&2
ceph-authtool --create-keyring "$admkring" --gen-key \
        -n client.admin \
        --cap mon 'allow *' \
        --cap osd 'allow *' \
        --cap mds 'allow *' \
        --cap mgr 'allow *' || exit 1
echo "Binding keyrings altogether" 1>&2
ceph-authtool "$monkring" --import-keyring "$admkring" || exit 1

echo "Creating mon map" 1>&2
monmaptool --create --add "$monname" "$monip" --fsid "$fsid" "$monmap" || exit 1

echo "Creating mon folder"
if ! mkdir "/var/lib/ceph/mon/$cluster-$monname" ; then
	echo "Unable to create mon folder" 1>&2
	exit 1
fi

echo "Creating mon filesystem" 1>&2

if ceph-mon --cluster "$cluster" --mkfs -i "$monname" --monmap "$monmap" --keyring "$monkring" ; then
        touch "/var/lib/ceph/mon/$cluster-$monname/done"
else
        echo "Mon create failed" 1>&2
        rm -rf "/var/lib/ceph/mon/$cluster-$monname"
        exit 1
fi

if id ceph 2>/dev/null >/dev/null ; then
        echo "Chown cluster files" 1>&2
        chown -R -H ceph:ceph "/etc/ceph/$cluster.conf" "$admkring" "/var/lib/ceph/mon/$cluster-$monname" || exit 1
else
	echo "No user \"ceph\" found" 1>&2
fi

rm -f "$monmap" "$monkring"
if [ -f "/usr/lib/systemd/system/ximera-ceph-mon@.service" -a "${use_ximera}" = "yes" ] ; then
	if systemctl start ximera-ceph-mon@$cluster-$monname.service ; then
	    systemctl enable ximera-ceph-mon@$cluster-$monname.service
	    echo -e "\nQuerying cluster status for cluster \"$cluster\"\n" 1>&2
	    ceph -s --cluster="$cluster"
	else
	    echo -e "\nMonitor startup failed for $cluster-$monname (ximera-ceph-mon)" 1>&2
	    fatal Aborting
	fi
elif [ -f "/usr/lib/systemd/system/ceph-mon@.service" ] ; then
	if systemctl start ceph-mon@$monname.service ; then
	    systemctl enable ceph-mon@$monname.service
	    echo -e "\nQuerying cluster status for default cluster\n" 1>&2
	    exec ceph -s
	else
	    echo -e "\nMonitor startup failed for $monname (ceph-mon)" 1>&2
	    fatal Aborting
	fi
fi
